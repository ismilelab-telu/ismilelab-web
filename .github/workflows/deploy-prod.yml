name: Publish Latest Image to Docker Hub

on:
  push:
    branches:
      - master
    paths-ignore:
      - README.md
      - Dockerfile.preview

env:
  IMAGE_TAG: web

jobs:
  Push-Latest:
    name: Build and Push Ismile-Web Latest Production Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Asia/Jakarta"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push to Docker Hub
        run: |
          DATE_TAG=${{ env.IMAGE_TAG }}-$(date +'%Y.%m.%d-%H.%M.%S')
          docker build \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/ismile-website:${{ env.IMAGE_TAG }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/ismile-website:$DATE_TAG \
            --push .

  Deploy-Prod:
    name: Deploy Created Image to Production
    runs-on: ubuntu-latest
    needs: Push-Latest
    steps:
      - name: Install cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
      - name: Setup SSH Config
        run: |
          mkdir -p ~/.ssh
          echo -e "Host ${{ secrets.SSH_HOST }}\n\tProxyCommand cloudflared access ssh --hostname %h\n" >> ~/.ssh/config
      - name: Deploy to Local Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ismile-repo/ismile-deploy
            docker compose pull ${{ env.IMAGE_TAG }}
            docker compose up -d --force-recreate ${{ env.IMAGE_TAG }}

